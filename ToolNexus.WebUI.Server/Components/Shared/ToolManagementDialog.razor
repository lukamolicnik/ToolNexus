@using Microsoft.AspNetCore.Components.Forms
@using ToolNexus.Application.Tools.DTOs
@inject ISnackbar Snackbar

@if (IsVisible)
{
    <div style="position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0,0,0,0.5); z-index: 9999; display: flex; justify-content: center; align-items: center;">
        <MudPaper Class="pa-6" Style="max-width: 600px; width: 90vw; max-height: 90vh; overflow-y: auto;">
            <MudStack Spacing="3">
                <MudStack Row="true" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
                    <MudText Typo="Typo.h5">@GetDialogTitle()</MudText>
                    <MudIconButton Icon="Icons.Material.Filled.Close" OnClick="HandleCancel" />
                </MudStack>

                @if (IsViewOnly)
                {
                    <MudStack Spacing="3">
                        <MudTextField Value="@(Tool?.Code)" Label="Koda" Variant="Variant.Outlined" ReadOnly="true" />
                        <MudTextField Value="@(Tool?.Name)" Label="Naziv" Variant="Variant.Outlined" ReadOnly="true" />
                        <MudTextField Value="@(Tool?.Description)" Label="Opis" Variant="Variant.Outlined" Lines="3" ReadOnly="true" />
                        <MudTextField Value="@(Tool?.Version)" Label="Verzija" Variant="Variant.Outlined" ReadOnly="true" />
                        <MudTextField Value="@(Tool?.CreatedBy)" Label="Ustvaril" Variant="Variant.Outlined" ReadOnly="true" />
                        <MudTextField Value="@(Tool?.CreatedAt.ToString("dd.MM.yyyy HH:mm"))" Label="Ustvarjeno" Variant="Variant.Outlined" ReadOnly="true" />
                        
                        <MudStack Row="true" Justify="Justify.FlexEnd">
                            <MudButton OnClick="HandleCancel">Zapri</MudButton>
                        </MudStack>
                    </MudStack>
                }
                else if (isSubmitting)
                {
                    <MudStack Spacing="4" AlignItems="AlignItems.Center" Class="pa-4">
                        <MudProgressCircular Color="Color.Primary" Size="Size.Large" Indeterminate="true" />
                        <MudText Typo="Typo.body1">@(IsEdit ? "Posodabljam orodje..." : "Ustvarjam orodje...")</MudText>
                    </MudStack>
                }
                else
                {
                    <EditForm EditContext="editContext" OnValidSubmit="HandleValidSubmit">
                        <DataAnnotationsValidator />
                        <MudStack Spacing="3">
                            
                            <MudTextField @bind-Value="toolModel.Code"
                                          For="@(() => toolModel.Code)"
                                          Label="Koda"
                                          Variant="Variant.Outlined"
                                          Required="true"
                                          Disabled="@IsEdit" />

                            <MudTextField @bind-Value="toolModel.Name"
                                          For="@(() => toolModel.Name)"
                                          Label="Naziv"
                                          Variant="Variant.Outlined"
                                          Required="true" />

                            <MudTextField @bind-Value="toolModel.Description"
                                          For="@(() => toolModel.Description)"
                                          Label="Opis"
                                          Variant="Variant.Outlined"
                                          Lines="3" />

                            <MudTextField @bind-Value="toolModel.Version"
                                          For="@(() => toolModel.Version)"
                                          Label="Verzija"
                                          Variant="Variant.Outlined" />

                            <ValidationSummary />

                            <MudStack Row="true" Justify="Justify.FlexEnd" Spacing="2">
                                <MudButton OnClick="HandleCancel">Prekliči</MudButton>
                                <MudButton ButtonType="ButtonType.Submit" 
                                          Color="Color.Primary" 
                                          Variant="Variant.Filled"
                                          Disabled="isSubmitting">
                                    @(IsEdit ? "Posodobi" : "Ustvari")
                                </MudButton>
                            </MudStack>
                        </MudStack>
                    </EditForm>
                }
            </MudStack>
        </MudPaper>
    </div>
}

@code {
    [Parameter] public bool IsVisible { get; set; }
    [Parameter] public Tool? Tool { get; set; }
    [Parameter] public bool IsEdit { get; set; }
    [Parameter] public bool IsViewOnly { get; set; }
    [Parameter] public EventCallback<bool> OnResult { get; set; }
    
    private CreateToolDto toolModel = new();
    private EditContext editContext = default!;
    private bool isSubmitting = false;
    
    protected override void OnParametersSet()
    {
        if (IsVisible && !IsViewOnly)
        {
            if (IsEdit && Tool != null)
            {
                toolModel = new CreateToolDto
                {
                    Code = Tool.Code,
                    Name = Tool.Name,
                    Description = Tool.Description,
                    Version = Tool.Version
                };
            }
            else
            {
                toolModel = new CreateToolDto();
            }
            
            editContext = new EditContext(toolModel);
        }
    }
    
    private string GetDialogTitle()
    {
        if (IsViewOnly) return "Podrobnosti orodja";
        return IsEdit ? "Uredi orodje" : "Dodaj orodje";
    }
    
    private async Task HandleValidSubmit()
    {
        try
        {
            isSubmitting = true;
            StateHasChanged();
            
            if (IsEdit && Tool != null)
            {
                // TODO: Implement UpdateToolAsync in ToolService
                await Task.Delay(1000); // Simulate API call
                Snackbar.Add("Orodje je bilo uspešno posodobljeno.", Severity.Success);
            }
            else
            {
                // TODO: Implement CreateToolAsync in ToolService
                await Task.Delay(1000); // Simulate API call
                Snackbar.Add("Orodje je bilo uspešno ustvarjeno.", Severity.Success);
            }
            
            await OnResult.InvokeAsync(true);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Napaka: {ex.Message}", Severity.Error);
        }
        finally
        {
            isSubmitting = false;
        }
    }
    
    private async Task HandleCancel()
    {
        await OnResult.InvokeAsync(false);
    }
}

public class CreateToolDto
{
    public string Code { get; set; } = string.Empty;
    public string Name { get; set; } = string.Empty;
    public string? Description { get; set; }
    public string? Version { get; set; }
}