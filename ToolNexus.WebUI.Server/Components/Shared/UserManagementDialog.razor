@using Microsoft.AspNetCore.Components.Forms
@using ToolNexus.Application.Users.DTOs
@inject IUserService UserService
@inject ISnackbar Snackbar

@if (IsVisible)
{
    <div style="position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0,0,0,0.5); z-index: 9999; display: flex; justify-content: center; align-items: center;">
        <MudPaper Class="pa-6" Style="max-width: 600px; width: 90vw; max-height: 90vh; overflow-y: auto;">
            <MudStack Spacing="3">
                <MudStack Row="true" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
                    <MudText Typo="Typo.h5">@(IsEdit ? "Uredi uporabnika" : "Dodaj novega uporabnika")</MudText>
                    <MudIconButton Icon="Icons.Material.Filled.Close" OnClick="HandleCancel" />
                </MudStack>

                @if (isSubmitting)
                {
                    <MudStack Spacing="4" AlignItems="AlignItems.Center" Class="pa-4">
                        <MudProgressCircular Color="Color.Primary" Size="Size.Large" Indeterminate="true" />
                        <MudText Typo="Typo.body1">@(IsEdit ? "Posodabljam uporabnika..." : "Ustvarjam uporabnika...")</MudText>
                    </MudStack>
                }
                else
                {
                    <EditForm EditContext="editContext" OnValidSubmit="HandleValidSubmit">
                        <DataAnnotationsValidator />
                        <MudStack Spacing="3">
                            
                            @if (!IsEdit)
                            {
                                <MudTextField @bind-Value="createUserModel.Username"
                                              For="@(() => createUserModel.Username)"
                                              Label="Uporabniško ime"
                                              Variant="Variant.Outlined"
                                              Required="true" />
                            }

                            <MudStack Row="true" Spacing="2">
                                @if (IsEdit)
                                {
                                    <MudTextField @bind-Value="updateUserModel.FirstName"
                                                  For="@(() => updateUserModel.FirstName)"
                                                  Label="Ime"
                                                  Variant="Variant.Outlined"
                                                  Required="true" />

                                    <MudTextField @bind-Value="updateUserModel.LastName"
                                                  For="@(() => updateUserModel.LastName)"
                                                  Label="Priimek"
                                                  Variant="Variant.Outlined"
                                                  Required="true" />
                                }
                                else
                                {
                                    <MudTextField @bind-Value="createUserModel.FirstName"
                                                  For="@(() => createUserModel.FirstName)"
                                                  Label="Ime"
                                                  Variant="Variant.Outlined"
                                                  Required="true" />

                                    <MudTextField @bind-Value="createUserModel.LastName"
                                                  For="@(() => createUserModel.LastName)"
                                                  Label="Priimek"
                                                  Variant="Variant.Outlined"
                                                  Required="true" />
                                }
                            </MudStack>

                            @if (IsEdit)
                            {
                                <MudTextField @bind-Value="updateUserModel.Email"
                                              For="@(() => updateUserModel.Email)"
                                              Label="Email"
                                              Variant="Variant.Outlined"
                                              InputType="InputType.Email"
                                              Required="true" />
                            }
                            else
                            {
                                <MudTextField @bind-Value="createUserModel.Email"
                                              For="@(() => createUserModel.Email)"
                                              Label="Email"
                                              Variant="Variant.Outlined"
                                              InputType="InputType.Email"
                                              Required="true" />
                            }

                            @if (IsEdit)
                            {
                                <MudSelect @bind-Value="updateUserModel.UserRoleId"
                                          For="@(() => updateUserModel.UserRoleId)"
                                          Label="Vloga"
                                          Variant="Variant.Outlined"
                                          Required="true">
                                    @if (UserRoles != null)
                                    {
                                        @foreach (var role in UserRoles)
                                        {
                                            <MudSelectItem Value="@role.Id">@role.Name</MudSelectItem>
                                        }
                                    }
                                </MudSelect>
                            }
                            else
                            {
                                <MudSelect @bind-Value="createUserModel.UserRoleId"
                                          For="@(() => createUserModel.UserRoleId)"
                                          Label="Vloga"
                                          Variant="Variant.Outlined"
                                          Required="true">
                                    @if (UserRoles != null)
                                    {
                                        @foreach (var role in UserRoles)
                                        {
                                            <MudSelectItem Value="@role.Id">@role.Name</MudSelectItem>
                                        }
                                    }
                                </MudSelect>
                            }

                            @if (!IsEdit)
                            {
                                <MudTextField @bind-Value="createUserModel.Password"
                                              For="@(() => createUserModel.Password)"
                                              Label="Geslo"
                                              Variant="Variant.Outlined"
                                              InputType="InputType.Password"
                                              Required="true" />
                            }
                            else
                            {
                                <MudStack Spacing="2">
                                    <MudCheckBox @bind-Value="showPasswordField"
                                                Label="Spremeni geslo"
                                                Color="Color.Primary" />
                                    
                                    @if (showPasswordField)
                                    {
                                        <MudTextField @bind-Value="updateUserModel.NewPassword"
                                                      For="@(() => updateUserModel.NewPassword)"
                                                      Label="Novo geslo"
                                                      Variant="Variant.Outlined"
                                                      InputType="InputType.Password"
                                                      Required="true" />
                                    }
                                </MudStack>
                            }

                            @if (IsEdit)
                            {
                                <MudCheckBox @bind-Value="updateUserModel.IsActive"
                                            Label="Aktiven uporabnik"
                                            Color="Color.Primary" />
                            }
                            else
                            {
                                <MudCheckBox @bind-Value="createUserModel.IsActive"
                                            Label="Aktiven uporabnik"
                                            Color="Color.Primary" />
                            }

                            <ValidationSummary />

                            <MudStack Row="true" Justify="Justify.FlexEnd" Spacing="2">
                                <MudButton OnClick="HandleCancel">Prekliči</MudButton>
                                <MudButton ButtonType="ButtonType.Submit" 
                                          Color="Color.Primary" 
                                          Variant="Variant.Filled"
                                          Disabled="isSubmitting">
                                    @(IsEdit ? "Posodobi" : "Ustvari")
                                </MudButton>
                            </MudStack>
                        </MudStack>
                    </EditForm>
                }
            </MudStack>
        </MudPaper>
    </div>
}

@code {
    [Parameter] public bool IsVisible { get; set; }
    [Parameter] public UserDto? User { get; set; }
    [Parameter] public List<UserRoleDto>? UserRoles { get; set; }
    [Parameter] public bool IsEdit { get; set; }
    [Parameter] public EventCallback<bool> OnResult { get; set; }
    
    private CreateUserDto createUserModel = new();
    private UpdateUserDto updateUserModel = new();
    private EditContext editContext = default!;
    private bool isSubmitting = false;
    private bool showPasswordField = false;
    
    protected override void OnParametersSet()
    {
        if (IsVisible)
        {
            if (IsEdit && User != null)
            {
                updateUserModel = new UpdateUserDto
                {
                    Id = User.Id,
                    FirstName = User.FirstName,
                    LastName = User.LastName,
                    Email = User.Email,
                    UserRoleId = User.UserRole?.Id ?? 0,
                    IsActive = User.IsActive,
                    NewPassword = null
                };
                editContext = new EditContext(updateUserModel);
                showPasswordField = false;
            }
            else
            {
                createUserModel = new CreateUserDto();
                editContext = new EditContext(createUserModel);
                showPasswordField = false;
            }
        }
    }
    
    private async Task HandleValidSubmit()
    {
        try
        {
            isSubmitting = true;
            StateHasChanged();
            
            if (IsEdit && User != null)
            {
                await UserService.UpdateUserAsync(updateUserModel, "system");
                Snackbar.Add("Uporabnik je bil uspešno posodobljen.", Severity.Success);
            }
            else
            {
                await UserService.CreateUserAsync(createUserModel, "system");
                Snackbar.Add("Uporabnik je bil uspešno ustvarjen.", Severity.Success);
            }
            
            await OnResult.InvokeAsync(true);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Napaka: {ex.Message}", Severity.Error);
        }
        finally
        {
            isSubmitting = false;
        }
    }
    
    private async Task HandleCancel()
    {
        await OnResult.InvokeAsync(false);
    }
}