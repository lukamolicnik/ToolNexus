@inject ICurrentUserService CurrentUserService
@inject NavigationManager NavigationManager

@if (IsAuthorized)
{
    @ChildContent
}
else if (!CurrentUserService.IsAuthenticated)
{
    <MudContainer MaxWidth="MaxWidth.Small" Class="mt-16">
        <MudPaper Elevation="4" Class="pa-8">
            <MudStack Spacing="4" AlignItems="AlignItems.Center">
                <MudProgressCircular Color="Color.Primary" Size="Size.Large" Indeterminate="true" />
                <MudText Typo="Typo.h6">Preusmerjam na prijavno stran...</MudText>
            </MudStack>
        </MudPaper>
    </MudContainer>
}
else
{
    <MudContainer MaxWidth="MaxWidth.Medium" Class="mt-8">
        <MudAlert Severity="Severity.Error" Variant="Variant.Filled">
            <MudStack Spacing="3" AlignItems="AlignItems.Center">
                <MudIcon Icon="Icons.Material.Filled.Block" Size="Size.Large" />
                <MudText Typo="Typo.h5">Dostop zavrnjen</MudText>
                <MudText Typo="Typo.body1" Align="Align.Center">
                    Nimate dovoljenj za dostop do te strani.
                </MudText>
                <MudButton Variant="Variant.Filled"
                           Color="Color.Primary"
                           StartIcon="Icons.Material.Filled.Home"
                           Href="/">
                    Nazaj na glavno stran
                </MudButton>
            </MudStack>
        </MudAlert>
    </MudContainer>
}

@code {
    [Parameter] public RenderFragment? ChildContent { get; set; }
    [Parameter] public UserRole[]? RequiredRoles { get; set; }
    [Parameter] public bool RequireAuthentication { get; set; } = true;

    private bool IsAuthorized
    {
        get
        {
            if (RequireAuthentication && !CurrentUserService.IsAuthenticated)
                return false;

            if (RequiredRoles == null || RequiredRoles.Length == 0)
                return CurrentUserService.IsAuthenticated;

            return RequiredRoles.Any(role => CurrentUserService.IsInRole(role));
        }
    }

    protected override async Task OnInitializedAsync()
    {
        if (RequireAuthentication && !CurrentUserService.IsAuthenticated)
        {
            NavigationManager.NavigateTo("/login");
        }
    }
}
