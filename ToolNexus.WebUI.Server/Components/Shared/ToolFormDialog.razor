@using Microsoft.AspNetCore.Components.Forms
@using ToolNexus.Application.Tools.DTOs
@using ToolNexus.WebUI.Server.Components.Shared
@inject IToolService ToolService

<EntityDialog TItem="Tool" 
             Loading="@isLoading"
             LoadingText="@GetLoadingText()"
             IsSubmitting="@isSubmitting"
             SubmitText="@GetSubmitText()"
             OnResult="HandleResult">
    
    @if (IsViewOnly)
    {
        <MudStack Spacing="3">
            <MudTextField Value="@(tool?.Code)" Label="Koda" Variant="Variant.Outlined" ReadOnly="true" />
            <MudTextField Value="@(tool?.Name)" Label="Naziv" Variant="Variant.Outlined" ReadOnly="true" />
            <MudTextField Value="@(tool?.Description)" Label="Opis" Variant="Variant.Outlined" Lines="3" ReadOnly="true" />
            <MudTextField Value="@(tool?.Version)" Label="Verzija" Variant="Variant.Outlined" ReadOnly="true" />
            <MudTextField Value="@(tool?.CreatedBy)" Label="Ustvaril" Variant="Variant.Outlined" ReadOnly="true" />
            <MudTextField Value="@(tool?.CreatedAt.ToString("dd.MM.yyyy HH:mm"))" Label="Ustvarjeno" Variant="Variant.Outlined" ReadOnly="true" />
        </MudStack>
    }
    else
    {
        <EditForm EditContext="@editContext" OnValidSubmit="@HandleValidSubmit">
            <DataAnnotationsValidator />
            <MudStack Spacing="3">
                
                <MudTextField @bind-Value="toolModel.Code"
                              For="@(() => toolModel.Code)"
                              Label="Koda"
                              Variant="Variant.Outlined"
                              Required="true"
                              Disabled="@IsEdit" />

                <MudTextField @bind-Value="toolModel.Name"
                              For="@(() => toolModel.Name)"
                              Label="Naziv"
                              Variant="Variant.Outlined"
                              Required="true" />

                <MudTextField @bind-Value="toolModel.Description"
                              For="@(() => toolModel.Description)"
                              Label="Opis"
                              Variant="Variant.Outlined"
                              Lines="3" />

                <MudTextField @bind-Value="toolModel.Version"
                              For="@(() => toolModel.Version)"
                              Label="Verzija"
                              Variant="Variant.Outlined" />

                <ValidationSummary />
            </MudStack>
        </EditForm>
    }
</EntityDialog>

@code {
    [Parameter] public Tool? Tool { get; set; }
    [Parameter] public bool IsEdit { get; set; }
    [Parameter] public bool IsViewOnly { get; set; }
    [Parameter] public EventCallback<bool> OnDialogResult { get; set; }
    
    private CreateToolDto toolModel = new();
    private Tool? tool;
    private EditContext editContext = default!;
    private bool isLoading = false;
    private bool isSubmitting = false;
    
    protected override void OnInitialized()
    {
        tool = Tool;
        
        if (!IsViewOnly)
        {
            if (IsEdit && Tool != null)
            {
                toolModel = new CreateToolDto
                {
                    Code = Tool.Code,
                    Name = Tool.Name,
                    Description = Tool.Description,
                    Version = Tool.Version
                };
            }
            
            editContext = new EditContext(toolModel);
        }
    }
    
    private string GetLoadingText()
    {
        if (IsEdit) return "Posodabljam orodje...";
        if (IsViewOnly) return "Nalagam podrobnosti...";
        return "Ustvarjam orodje...";
    }
    
    private string GetSubmitText()
    {
        if (IsEdit) return "Posodobi";
        if (IsViewOnly) return "Zapri";
        return "Ustvari";
    }
    
    private async Task HandleResult(bool result)
    {
        if (!result)
        {
            await OnDialogResult.InvokeAsync(false);
            return;
        }
        
        if (IsViewOnly)
        {
            await OnDialogResult.InvokeAsync(false);
            return;
        }
        
        if (!editContext.Validate())
            return;
            
        await HandleValidSubmit();
    }
    
    private async Task HandleValidSubmit()
    {
        try
        {
            isSubmitting = true;
            
            if (IsEdit && Tool != null)
            {
                // TODO: Implement UpdateToolAsync in ToolService
                // await ToolService.UpdateToolAsync(Tool.Id, toolModel);
                await Task.Delay(1000); // Simulate API call
            }
            else
            {
                // TODO: Implement CreateToolAsync in ToolService
                // await ToolService.CreateToolAsync(toolModel, "system");
                await Task.Delay(1000); // Simulate API call
            }
            
            await OnDialogResult.InvokeAsync(true);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving tool: {ex.Message}");
            // Error is handled by the calling component
            throw;
        }
        finally
        {
            isSubmitting = false;
        }
    }
}

// DTO for creating/updating tools
public class CreateToolDto
{
    public string Code { get; set; } = string.Empty;
    public string Name { get; set; } = string.Empty;
    public string? Description { get; set; }
    public string? Version { get; set; }
}