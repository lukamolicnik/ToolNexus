@page "/stock-adjustments"
@rendermode InteractiveServer
@attribute [Authorize(Roles = "ADMIN,SUPERVISOR")]
@inject IStockAdjustmentService StockAdjustmentService
@inject IToolService ToolService
@inject ISnackbar Snackbar
@using Microsoft.AspNetCore.Authorization
@using ToolNexus.Application.StockAdjustments
@using ToolNexus.Application.StockAdjustments.DTOs
@using ToolNexus.Application.Tools
@using ToolNexus.Application.Tools.DTOs
@using ToolNexus.Domain.StockAdjustments
@implements IDisposable

<PageTitle>Zgodovina sprememb zaloge - ToolNexus</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4">
    <MudStack Spacing="4">
        <MudStack Row="true" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
            <MudText Typo="Typo.h4">Zgodovina sprememb zaloge</MudText>
            <MudButton Variant="Variant.Outlined" 
                      StartIcon="@Icons.Material.Filled.ArrowBack" 
                      Href="/">
                Nazaj
            </MudButton>
        </MudStack>

        <MudPaper Class="pa-4">
            <MudGrid>
                <MudItem xs="12" sm="4">
                    <MudSelect T="int?" @bind-Value="selectedToolId" 
                               Label="Filter po orodju" 
                               Clearable="true"
                               @bind-Value:after="OnFilterChanged">
                        @if (tools != null)
                        {
                            @foreach (var tool in tools)
                            {
                                <MudSelectItem Value="@((int?)tool.Id)">@tool.Name (@tool.Code)</MudSelectItem>
                            }
                        }
                    </MudSelect>
                </MudItem>
                <MudItem xs="12" sm="4">
                    <MudSelect T="StockAdjustmentType?" @bind-Value="selectedType" 
                               Label="Tip spremembe" 
                               Clearable="true"
                               @bind-Value:after="OnFilterChanged">
                        <MudSelectItem Value="@((StockAdjustmentType?)StockAdjustmentType.Increase)">Povečanje</MudSelectItem>
                        <MudSelectItem Value="@((StockAdjustmentType?)StockAdjustmentType.Decrease)">Zmanjšanje</MudSelectItem>
                    </MudSelect>
                </MudItem>
                <MudItem xs="12" sm="4">
                    <MudTextField @bind-Value="searchTerm" 
                                  Label="Iskanje" 
                                  Placeholder="Orodje, uporabnik, razlog, opombe..."
                                  Adornment="Adornment.End"
                                  AdornmentIcon="@Icons.Material.Filled.Search"
                                  Immediate="true"
                                  DebounceInterval="500"
                                  OnDebounceIntervalElapsed="@(async () => await OnFilterChanged())"
                                  Clearable="true" />
                </MudItem>
            </MudGrid>
        </MudPaper>

        <MudTable T="StockAdjustmentDto"
                  @ref="table"
                  ServerData="@LoadServerData"
                  Dense="true"
                  Hover="true"
                  Breakpoint="Breakpoint.Sm"
                  Loading="@loading"
                  LoadingProgressColor="Color.Info">
            <ToolBarContent>
                <MudText Typo="Typo.h6">Zgodovina sprememb</MudText>
                <MudSpacer />
                <MudText Typo="Typo.body2" Class="align-self-center">
                    @if (pagedResult != null)
                    {
                        <text>Prikazujem @((pagedResult.Page - 1) * pagedResult.PageSize + 1) - @(Math.Min(pagedResult.Page * pagedResult.PageSize, pagedResult.TotalItems)) od @pagedResult.TotalItems</text>
                    }
                </MudText>
            </ToolBarContent>
            <HeaderContent>
                <MudTh>Datum in čas</MudTh>
                <MudTh>Orodje</MudTh>
                <MudTh>Tip</MudTh>
                <MudTh>Količina</MudTh>
                <MudTh>Zaloga</MudTh>
                <MudTh>Razlog</MudTh>
                <MudTh>Opombe</MudTh>
                <MudTh>Izvedel</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Datum in čas">
                    <MudText Typo="Typo.body2">@context.AdjustedAt.ToString("dd.MM.yyyy HH:mm:ss")</MudText>
                </MudTd>
                <MudTd DataLabel="Orodje">
                    <MudStack Spacing="0">
                        <MudText Typo="Typo.body2">@context.ToolName</MudText>
                        <MudText Typo="Typo.caption">@context.ToolCode</MudText>
                    </MudStack>
                </MudTd>
                <MudTd DataLabel="Tip">
                    @if (context.AdjustmentType == StockAdjustmentType.Increase)
                    {
                        <MudChip T="string" Icon="@Icons.Material.Filled.Add" Color="Color.Success" Size="Size.Small">
                            Povečanje
                        </MudChip>
                    }
                    else
                    {
                        <MudChip T="string" Icon="@Icons.Material.Filled.Remove" Color="Color.Error" Size="Size.Small">
                            Zmanjšanje
                        </MudChip>
                    }
                </MudTd>
                <MudTd DataLabel="Količina">
                    <MudText>@context.Quantity</MudText>
                </MudTd>
                <MudTd DataLabel="Zaloga">
                    <MudStack Row="true" Spacing="1" AlignItems="AlignItems.Center">
                        <MudText>@context.PreviousStock</MudText>
                        <MudIcon Icon="@Icons.Material.Filled.ArrowForward" Size="Size.Small" />
                        <MudText Color="@(context.NewStock < context.PreviousStock ? Color.Error : Color.Success)">
                            @context.NewStock
                        </MudText>
                    </MudStack>
                </MudTd>
                <MudTd DataLabel="Razlog">
                    <MudText>@(context.Reason ?? "-")</MudText>
                </MudTd>
                <MudTd DataLabel="Opombe">
                    @if (!string.IsNullOrEmpty(context.Notes))
                    {
                        <MudTooltip Text="@context.Notes">
                            <MudText Style="max-width: 200px; overflow: hidden; text-overflow: ellipsis; white-space: nowrap;">
                                @context.Notes
                            </MudText>
                        </MudTooltip>
                    }
                    else
                    {
                        <MudText>-</MudText>
                    }
                </MudTd>
                <MudTd DataLabel="Izvedel">
                    <MudText>@context.AdjustedBy</MudText>
                </MudTd>
            </RowTemplate>
            <NoRecordsContent>
                <MudText>Ni podatkov za prikaz</MudText>
            </NoRecordsContent>
            <LoadingContent>
                <MudText>Nalagam...</MudText>
            </LoadingContent>
            <PagerContent>
                <MudTablePager PageSizeOptions="new int[]{10, 25, 50, 100}" />
            </PagerContent>
        </MudTable>
    </MudStack>
</MudContainer>

@code {
    private MudTable<StockAdjustmentDto> table = null!;
    private PagedStockAdjustmentDto? pagedResult;
    private List<ToolDto>? tools;
    private bool loading = false;
    private int? selectedToolId;
    private StockAdjustmentType? selectedType;
    private string searchTerm = "";

    protected override async Task OnInitializedAsync()
    {
        await LoadTools();
    }

    private async Task LoadTools()
    {
        try
        {
            tools = await ToolService.GetAllToolsAsync();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Napaka pri nalaganju orodij: {ex.Message}", Severity.Error);
        }
    }

    private async Task<TableData<StockAdjustmentDto>> LoadServerData(TableState state, CancellationToken cancellationToken)
    {
        loading = true;
        
        try
        {
            var request = new StockAdjustmentPageRequest
            {
                Page = state.Page + 1, // MudTable uses 0-based pages
                PageSize = state.PageSize,
                ToolId = selectedToolId,
                AdjustmentType = selectedType,
                SearchTerm = string.IsNullOrEmpty(searchTerm) ? null : searchTerm
            };

            pagedResult = await StockAdjustmentService.GetPagedAsync(request);

            return new TableData<StockAdjustmentDto>
            {
                Items = pagedResult.Items,
                TotalItems = pagedResult.TotalItems
            };
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Napaka pri nalaganju: {ex.Message}", Severity.Error);
            return new TableData<StockAdjustmentDto> { Items = new List<StockAdjustmentDto>(), TotalItems = 0 };
        }
        finally
        {
            loading = false;
        }
    }

    private async Task OnFilterChanged()
    {
        await table.ReloadServerData();
    }


    public void Dispose()
    {
    }
}