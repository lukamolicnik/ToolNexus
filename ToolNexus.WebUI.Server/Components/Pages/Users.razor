@page "/users"
@rendermode InteractiveServer
@attribute [Authorize(Roles = "ADMIN")]
@inject IUserService UserService
@inject ISnackbar Snackbar
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Forms
@using ToolNexus.WebUI.Server.Components.Dialogs
@using ToolNexus.WebUI.Server.Components.Shared

<PageTitle>Uporabniki - ToolNexus</PageTitle>

<MudContainer MaxWidth="MaxWidth.False" Class="pa-4">
    <MudStack Spacing="4">
        <MudStack Row="true" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
            <MudText Typo="Typo.h4">Upravljanje uporabnikov</MudText>
            <MudStack Row="true" Spacing="2">
                <MudButton Variant="Variant.Filled" 
                          Color="Color.Primary" 
                          StartIcon="@Icons.Material.Filled.PersonAdd"
                          OnClick="CreateUser">
                    Dodaj uporabnika
                </MudButton>
                <MudButton Variant="Variant.Outlined" 
                          StartIcon="@Icons.Material.Filled.ArrowBack" 
                          Href="/">
                    Nazaj
                </MudButton>
            </MudStack>
        </MudStack>

        @if (users == null)
        {
            <MudPaper Elevation="2" Class="pa-8">
                <MudStack Spacing="4" AlignItems="AlignItems.Center">
                    <MudProgressCircular Color="Color.Primary" Size="Size.Large" Indeterminate="true" />
                    <MudText Typo="Typo.h6">Nalagam uporabnike...</MudText>
                </MudStack>
            </MudPaper>
        }
        else
        {
            <EntityDataGrid TItem="UserDto"
                           Title="Seznam uporabnikov"
                           Icon="@Icons.Material.Filled.People"
                           Items="users"
                           Loading="isLoading"
                           OnEdit="EditUserAsync"
                           OnDelete="ToggleUserStatusAsync"
                           CanDelete="@(user => currentUser != null && user.Id != currentUser.Id)"
                           DeleteButtonText="@((user) => user.IsActive ? "Deaktiviraj" : "Aktiviraj")"
                           DeleteIcon="@((user) => user.IsActive ? Icons.Material.Filled.PersonOff : Icons.Material.Filled.PersonAdd)"
                           SearchFunc="@((user, search) => UserSearchFunc(user, search))">
                <ColumnsTemplate>
                    <PropertyColumn T="UserDto" TProperty="int" Property="x => x.Id" Title="ID" />
                    <TemplateColumn T="UserDto" Title="Uporabniško ime">
                        <CellTemplate Context="cellContext">
                            <MudChip T="string" Size="Size.Small" Color="Color.Secondary">@cellContext.Item.Username</MudChip>
                        </CellTemplate>
                    </TemplateColumn>
                    <PropertyColumn T="UserDto" TProperty="string" Property="x => x.FullName" Title="Ime in priimek" />
                    <PropertyColumn T="UserDto" TProperty="string" Property="x => x.Email" Title="Email" />
                    <TemplateColumn T="UserDto" Title="Vloga" Sortable="true">
                        <CellTemplate Context="cellContext">
                            <MudChip T="string" Size="Size.Small" 
                                    Color="@GetRoleColor(cellContext.Item.UserRole?.Code)"
                                    Icon="@GetRoleIcon(cellContext.Item.UserRole?.Code)">
                                @(cellContext.Item.UserRole?.Name ?? "N/A")
                            </MudChip>
                        </CellTemplate>
                    </TemplateColumn>
                    <TemplateColumn T="UserDto" Title="Status" Sortable="true">
                        <CellTemplate Context="cellContext">
                            <MudChip T="string" Size="Size.Small" 
                                    Color="@(cellContext.Item.IsActive ? Color.Success : Color.Error)"
                                    Icon="@(cellContext.Item.IsActive ? Icons.Material.Filled.CheckCircle : Icons.Material.Filled.Block)">
                                @(cellContext.Item.IsActive ? "Aktiven" : "Neaktiven")
                            </MudChip>
                        </CellTemplate>
                    </TemplateColumn>
                </ColumnsTemplate>
            </EntityDataGrid>
        }
    </MudStack>
</MudContainer>

<UserFormDialog IsVisible="@showUserDialog"
                     User="@selectedUser"
                     UserRoles="@userRoles"
                     IsEdit="@isEditMode"
                     OnResult="HandleUserDialogResult" />

@if (showStatusDialog)
{
    <div style="position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0,0,0,0.5); z-index: 9999; display: flex; justify-content: center; align-items: center;">
        <MudPaper Class="pa-6" Style="max-width: 400px; width: 90vw;">
            <MudStack Spacing="3">
                <MudText Typo="Typo.h6">Potrditev @(userToToggle?.IsActive == true ? "deaktivacije" : "aktivacije")</MudText>
                <MudText Typo="Typo.body1">@statusMessage</MudText>
                <MudText Typo="Typo.body2" Color="@(userToToggle?.IsActive == true ? Color.Warning : Color.Info)">
                    @(userToToggle?.IsActive == true ? "Uporabnik ne bo mogel dostopati do sistema." : "Uporabnik bo ponovno pridobil dostop do sistema.")
                </MudText>
                <MudStack Row="true" Justify="Justify.FlexEnd" Spacing="2">
                    <MudButton OnClick="() => showStatusDialog = false">Prekliči</MudButton>
                    <MudButton Color="@(userToToggle?.IsActive == true ? Color.Warning : Color.Success)" 
                              Variant="Variant.Filled" 
                              OnClick="ConfirmStatusToggle">
                        @(userToToggle?.IsActive == true ? "Deaktiviraj" : "Aktiviraj")
                    </MudButton>
                </MudStack>
            </MudStack>
        </MudPaper>
    </div>
}

@code {
    private List<UserDto>? users;
    private List<UserRoleDto>? userRoles;
    private UserDto? currentUser;
    private UserDto? selectedUser;
    private bool isLoading = false;
    private bool showUserDialog = false;
    private bool isEditMode = false;
    private bool showStatusDialog = false;
    private string statusMessage = string.Empty;
    private UserDto? userToToggle;

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var authState = await authenticationStateTask;

            if (authState.User.Identity.IsAuthenticated)
            {
                var userId = int.Parse(authState.User.Identities
                    .Select(i => i.Claims.FirstOrDefault(c => c.Type == "UserId")?.Value)
                    .FirstOrDefault());

                currentUser = await UserService.GetUserByIdAsync(userId);

                await LoadUsers();
                await LoadUserRoles();
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Napaka pri inicializaciji: {ex.Message}", Severity.Error);
        }
    }

    private async Task LoadUsers()
    {
        try
        {
            isLoading = true;
            users = await UserService.GetAllUsersAsync();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Napaka pri nalaganju uporabnikov: {ex.Message}", Severity.Error);
            users = new List<UserDto>();
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task LoadUserRoles()
    {
        try
        {
            userRoles = await UserService.GetAllUserRolesAsync();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Napaka pri nalaganju vlog: {ex.Message}", Severity.Error);
            userRoles = new List<UserRoleDto>();
        }
    }

    private Color GetRoleColor(string? roleCode) => roleCode switch
    {
        "ADMIN" => Color.Error,
        "SUPERVISOR" => Color.Warning,
        "WORKER" => Color.Info,
        _ => Color.Default
    };

    private string GetRoleIcon(string? roleCode) => roleCode switch
    {
        "ADMIN" => Icons.Material.Filled.AdminPanelSettings,
        "SUPERVISOR" => Icons.Material.Filled.ManageAccounts,
        "WORKER" => Icons.Material.Filled.Person,
        _ => Icons.Material.Filled.Person
    };

    private bool UserSearchFunc(UserDto user, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;

        return user.Username.Contains(searchString, StringComparison.OrdinalIgnoreCase) ||
               user.FullName.Contains(searchString, StringComparison.OrdinalIgnoreCase) ||
               user.Email.Contains(searchString, StringComparison.OrdinalIgnoreCase);
    }

    private void CreateUser()
    {
        selectedUser = null;
        isEditMode = false;
        showUserDialog = true;
    }

    private Task EditUserAsync(UserDto user)
    {
        selectedUser = user;
        isEditMode = true;
        showUserDialog = true;

        StateHasChanged();
        return Task.CompletedTask;
    }

    private Task ToggleUserStatusAsync(UserDto user)
    {
        userToToggle = user;
        if (user.IsActive)
        {
            statusMessage = $"Ali ste prepričani, da želite deaktivirati uporabnika {user.FullName}?";
        }
        else
        {
            statusMessage = $"Ali ste prepričani, da želite aktivirati uporabnika {user.FullName}?";
        }
        showStatusDialog = true;
        StateHasChanged();
        return Task.CompletedTask;
    }

    private async Task HandleUserDialogResult(bool success)
    {
        showUserDialog = false;
        if (success)
        {
            await LoadUsers();
        }
    }

    private async Task ConfirmStatusToggle()
    {
        showStatusDialog = false;
        if (userToToggle != null)
        {
            try
            {
                await UserService.ToggleUserStatusAsync(userToToggle.Id);
                var action = userToToggle.IsActive ? "deaktiviran" : "aktiviran";
                Snackbar.Add($"Uporabnik {userToToggle.FullName} je bil uspešno {action}.", Severity.Success);
                await LoadUsers();
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Napaka pri spreminjanju statusa uporabnika: {ex.Message}", Severity.Error);
            }
        }
        userToToggle = null;
    }
}