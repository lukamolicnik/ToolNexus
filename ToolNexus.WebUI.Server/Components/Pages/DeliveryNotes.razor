@page "/delivery-notes"
@rendermode InteractiveServer
@attribute [Authorize(Roles = "ADMIN,SUPERVISOR")]
@inject IDeliveryNoteService DeliveryNoteService
@inject ISnackbar Snackbar
@using Microsoft.AspNetCore.Authorization
@using ToolNexus.Application.DeliveryNotes
@using ToolNexus.Application.DeliveryNotes.DTOs
@using ToolNexus.WebUI.Server.Components.Dialogs

<PageTitle>Dobavnice - ToolNexus</PageTitle>

<MudContainer MaxWidth="MaxWidth.False" Class="pa-2 pa-sm-3 pa-md-4">
    <MudStack Spacing="3">
        <MudGrid AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween">
            <MudItem xs="12" sm="6">
                <MudText Typo="Typo.h4" Class="text-truncate">Dobavnice</MudText>
            </MudItem>
            <MudItem xs="12" sm="6" Class="d-flex justify-end">
                <MudStack Row="true" Spacing="2" Class="flex-wrap">
                    <MudButton Variant="Variant.Filled" 
                              Color="Color.Primary" 
                              StartIcon="@Icons.Material.Filled.Add"
                              OnClick="CreateDeliveryNote"
                              Class="mb-2 mb-sm-0">
                        <MudHidden Breakpoint="Breakpoint.Xs">
                            Nova dobavnica
                        </MudHidden>
                        <MudHidden Breakpoint="Breakpoint.Xs" Invert="true">
                            Nova
                        </MudHidden>
                    </MudButton>
                    <MudButton Variant="Variant.Outlined" 
                              StartIcon="@Icons.Material.Filled.ArrowBack" 
                              Href="/"
                              Class="mb-2 mb-sm-0">
                        Nazaj
                    </MudButton>
                </MudStack>
            </MudItem>
        </MudGrid>

        @if (filteredDeliveryNotes == null)
        {
            <MudPaper Elevation="2" Class="pa-8">
                <MudStack Spacing="4" AlignItems="AlignItems.Center">
                    <MudProgressCircular Color="Color.Primary" Size="Size.Large" Indeterminate="true" />
                    <MudText Typo="Typo.h6">Nalagam dobavnice...</MudText>
                </MudStack>
            </MudPaper>
        }
        else if (deliveryNotes?.Count == 0 && !deliveryDateFilter.HasValue && !createdDateFilter.HasValue)
        {
            <MudAlert Severity="Severity.Info" Variant="Variant.Filled">
                <MudStack Spacing="2" AlignItems="AlignItems.Center">
                    <MudIcon Icon="Icons.Material.Filled.Info" Size="Size.Large" />
                    <MudText Typo="Typo.h6">Ni dobavnic</MudText>
                    <MudText Typo="Typo.body1">V sistemu trenutno ni registriranih dobavnic.</MudText>
                </MudStack>
            </MudAlert>
        }
        else
        {
            <MudPaper Elevation="2">
                <MudToolBar>
                    <MudIcon Icon="@Icons.Material.Filled.Receipt" />
                    <MudText Typo="Typo.h6" Class="ml-3">Seznam dobavnic</MudText>
                    <MudSpacer />
                    <MudTextField @bind-Value="searchString" 
                                  Placeholder="Iskanje..." 
                                  Adornment="Adornment.Start" 
                                  AdornmentIcon="@Icons.Material.Filled.Search" 
                                  IconSize="Size.Medium" 
                                  Immediate="true"
                                  Class="mt-0" />
                </MudToolBar>
                
                <MudDataGrid Items="@filteredDeliveryNotes" 
                            Filterable="true" 
                            FilterMode="DataGridFilterMode.ColumnFilterRow"
                            SortMode="SortMode.Multiple" 
                            Groupable="false"
                            QuickFilter="@_quickFilter"
                            Hover="true"
                            Striped="true"
                            Dense="true"
                            Loading="@isLoading"
                            RowsPerPage="10"
                            ShowMenuIcon="false">
                    <Columns>
                        <PropertyColumn T="DeliveryNoteDto" TProperty="string" Property="x => x.DeliveryNoteNumber" Title="Številka dobavnice" Sortable="true" Filterable="true" />
                        <TemplateColumn T="DeliveryNoteDto" Title="Datum" Sortable="true" SortBy="x => x.DeliveryDate" Filterable="true">
                            <CellTemplate Context="deliveryNote">
                                <MudText>@deliveryNote.Item.DeliveryDate.ToString("dd.MM.yyyy")</MudText>
                            </CellTemplate>
                            <FilterTemplate>
                                <MudDatePicker @bind-Date="deliveryDateFilter" @bind-Date:after="OnDeliveryDateFilterChanged" Clearable="true" />
                            </FilterTemplate>
                        </TemplateColumn>
                        <PropertyColumn T="DeliveryNoteDto" TProperty="string" Property="x => x.SupplierName" Title="Dobavitelj" Sortable="true" Filterable="true" />
                        <PropertyColumn T="DeliveryNoteDto" TProperty="decimal" Property="x => x.TotalAmount" Title="Znesek" Sortable="true">
                            <CellTemplate Context="deliveryNote">
                                <MudText>@deliveryNote.Item.TotalAmount.ToString("C")</MudText>
                            </CellTemplate>
                        </PropertyColumn>
                        <TemplateColumn T="DeliveryNoteDto" Title="Ustvarjeno" Sortable="true" SortBy="x => x.CreatedAt" Filterable="true">
                            <CellTemplate Context="deliveryNote">
                                <MudText>@deliveryNote.Item.CreatedAt.ToString("dd.MM.yyyy HH:mm")</MudText>
                            </CellTemplate>
                            <FilterTemplate>
                                <MudDatePicker @bind-Date="createdDateFilter" @bind-Date:after="OnCreatedDateFilterChanged" Clearable="true" />
                            </FilterTemplate>
                        </TemplateColumn>
                        <TemplateColumn Title="Akcije" Sortable="false" Filterable="false">
                            <CellTemplate Context="deliveryNote">
                                <MudStack Row="true" Spacing="1">
                                    <MudIconButton Icon="@Icons.Material.Filled.Visibility" 
                                                  Color="Color.Primary" 
                                                  Size="Size.Small"
                                                  Title="Poglej podrobnosti"
                                                  OnClick="@(async () => await ViewDeliveryNote(deliveryNote.Item))" />
                                    <MudIconButton Icon="@Icons.Material.Filled.Delete" 
                                                  Color="Color.Error" 
                                                  Size="Size.Small"
                                                  Title="Izbriši"
                                                  OnClick="@(() => DeleteDeliveryNote(deliveryNote.Item))" />
                                </MudStack>
                            </CellTemplate>
                        </TemplateColumn>
                    </Columns>
                    <PagerContent>
                        <MudDataGridPager T="DeliveryNoteDto" />
                    </PagerContent>
                </MudDataGrid>
            </MudPaper>
        }
    </MudStack>
</MudContainer>

<DeliveryNoteFormDialog IsVisible="@showDeliveryNoteDialog"
                        OnResult="HandleDeliveryNoteDialogResult" />

<DeliveryNoteViewDialog IsVisible="@showViewDialog"
                        DeliveryNote="@selectedDeliveryNote"
                        DeliveryNoteDetails="@selectedDeliveryNoteDetails"
                        OnClose="HandleViewDialogClose" />

@if (showDeleteDialog)
{
    <div style="position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0,0,0,0.5); z-index: 9999; display: flex; justify-content: center; align-items: center;">
        <MudPaper Class="pa-6" Style="max-width: 400px; width: 90vw;">
            <MudStack Spacing="3">
                <MudText Typo="Typo.h6">Potrditev brisanja</MudText>
                <MudText Typo="Typo.body1">@deleteMessage</MudText>
                <MudText Typo="Typo.body2" Color="Color.Error">Ta operacija bo trajno izbrisala dobavnico in povrnila zalogo orodij.</MudText>
                <MudStack Row="true" Justify="Justify.FlexEnd" Spacing="2">
                    <MudButton OnClick="() => showDeleteDialog = false">Prekliči</MudButton>
                    <MudButton Color="Color.Error" Variant="Variant.Filled" OnClick="ConfirmDelete">Izbriši</MudButton>
                </MudStack>
            </MudStack>
        </MudPaper>
    </div>
}

@code {
    private List<DeliveryNoteDto>? deliveryNotes;
    private List<DeliveryNoteDto>? filteredDeliveryNotes;
    private DeliveryNoteDto? selectedDeliveryNote;
    private DeliveryNoteDto? selectedDeliveryNoteDetails;
    private string searchString = string.Empty;
    private bool showDeliveryNoteDialog = false;
    private bool showViewDialog = false;
    private bool showDeleteDialog = false;
    private string deleteMessage = string.Empty;
    private DeliveryNoteDto? deliveryNoteToDelete;
    private bool isLoading = false;
    private DateTime? deliveryDateFilter;
    private DateTime? createdDateFilter;
    
    private Func<DeliveryNoteDto, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
            
        var searchLower = searchString.ToLower();
        return x.DeliveryNoteNumber.ToLower().Contains(searchLower) ||
               x.SupplierName.ToLower().Contains(searchLower) ||
               (x.Notes?.ToLower().Contains(searchLower) ?? false);
    };

    protected override async Task OnInitializedAsync()
    {
        await LoadDeliveryNotes();
    }

    private async Task LoadDeliveryNotes()
    {
        try
        {
            isLoading = true;
            deliveryNotes = await DeliveryNoteService.GetAllDeliveryNotesAsync();
            ApplyFilters();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Napaka pri nalaganju dobavnic: {ex.Message}", Severity.Error);
            deliveryNotes = new List<DeliveryNoteDto>();
            filteredDeliveryNotes = new List<DeliveryNoteDto>();
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task ViewDeliveryNote(DeliveryNoteDto note)
    {
        selectedDeliveryNote = note;
        selectedDeliveryNoteDetails = null;
        showViewDialog = true;
        StateHasChanged();
        
        try
        {
            selectedDeliveryNoteDetails = await DeliveryNoteService.GetDeliveryNoteByIdAsync(note.Id);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Napaka pri nalaganju podrobnosti: {ex.Message}", Severity.Error);
        }
    }

    private void CreateDeliveryNote()
    {
        showDeliveryNoteDialog = true;
    }

    private async Task HandleDeliveryNoteDialogResult(bool success)
    {
        showDeliveryNoteDialog = false;
        if (success)
        {
            await LoadDeliveryNotes();
        }
    }
    
    private void HandleViewDialogClose()
    {
        showViewDialog = false;
        selectedDeliveryNote = null;
        selectedDeliveryNoteDetails = null;
        StateHasChanged();
    }

    private void DeleteDeliveryNote(DeliveryNoteDto deliveryNote)
    {
        deliveryNoteToDelete = deliveryNote;
        deleteMessage = $"Ali ste prepričani, da želite izbrisati dobavnico {deliveryNote.DeliveryNoteNumber}?";
        showDeleteDialog = true;
    }

    private async Task ConfirmDelete()
    {
        showDeleteDialog = false;
        if (deliveryNoteToDelete != null)
        {
            try
            {
                await DeliveryNoteService.DeleteDeliveryNoteAsync(deliveryNoteToDelete.Id);
                Snackbar.Add($"Dobavnica {deliveryNoteToDelete.DeliveryNoteNumber} je bila uspešno izbrisana.", Severity.Success);
                selectedDeliveryNote = null;
                selectedDeliveryNoteDetails = null;
                await LoadDeliveryNotes();
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Napaka pri brisanju dobavnice: {ex.Message}", Severity.Error);
            }
        }
        deliveryNoteToDelete = null;
    }
    
    private void OnDeliveryDateFilterChanged()
    {
        ApplyFilters();
        StateHasChanged();
    }
    
    private void OnCreatedDateFilterChanged()
    {
        ApplyFilters();
        StateHasChanged();
    }
    
    private void ApplyFilters()
    {
        if (deliveryNotes == null)
        {
            filteredDeliveryNotes = new List<DeliveryNoteDto>();
            return;
        }

        var result = deliveryNotes.AsEnumerable();

        if (deliveryDateFilter.HasValue)
        {
            result = result.Where(d => d.DeliveryDate.Date == deliveryDateFilter.Value.Date);
        }

        if (createdDateFilter.HasValue)
        {
            result = result.Where(d => d.CreatedAt.Date == createdDateFilter.Value.Date);
        }

        filteredDeliveryNotes = result.ToList();
    }
}