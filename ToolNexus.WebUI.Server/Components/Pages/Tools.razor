@page "/tools"
@using Microsoft.AspNetCore.Authorization
@inject IToolService ToolService
@attribute [Authorize(Roles = "ADMIN,SUPERVISOR,WORKER")]

<PageTitle>Orodja - ToolNexus</PageTitle>

<AuthorizeView Roles="ADMIN,SUPERVISOR,WORKER">
    <MudStack Spacing="4">
        <MudStack Row="true" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
            <MudText Typo="Typo.h4">Orodja</MudText>
            <MudButton Variant="Variant.Outlined" 
                      StartIcon="@Icons.Material.Filled.ArrowBack" 
                      Href="/">Nazaj
            </MudButton>
        </MudStack>

        @if (tools == null)
        {
            <MudPaper Elevation="2" Class="pa-8">
                <MudStack Spacing="4" AlignItems="AlignItems.Center">
                    <MudProgressCircular Color="Color.Primary" Size="Size.Large" Indeterminate="true" />
                    <MudText Typo="Typo.h6">Nalagam orodja...</MudText>
                    <MudText Typo="Typo.body2">Debug: tools = @(tools?.Count.ToString() ?? "null")</MudText>
                </MudStack>
            </MudPaper>
        }
        else if (tools.Count == 0)
        {
            <MudAlert Severity="Severity.Info" Variant="Variant.Filled">
                <MudStack Spacing="2" AlignItems="AlignItems.Center">
                    <MudIcon Icon="Icons.Material.Filled.Info" Size="Size.Large" />
                    <MudText Typo="Typo.h6">Ni orodij</MudText>
                    <MudText Typo="Typo.body1">V sistemu trenutno ni registriranih orodij.</MudText>
                </MudStack>
            </MudAlert>
        }
        else
        {
            <MudPaper Elevation="2">
                <MudToolBar>
                    <MudIcon Icon="Icons.Material.Filled.List" />
                    <MudText Typo="Typo.h6" Class="ml-3">Seznam orodij</MudText>
                    <MudSpacer />
                    <MudTextField @bind-Value="searchString" 
                                 Placeholder="Iskanje..." 
                                 Adornment="Adornment.Start" 
                                 AdornmentIcon="Icons.Material.Filled.Search" 
                                 IconSize="Size.Medium" 
                                 Immediate="true"
                                 Class="mt-0" />
                </MudToolBar>
                
                <MudDataGrid Items="@tools" 
                           Filterable="true" 
                           FilterMode="DataGridFilterMode.ColumnFilterRow"
                           SortMode="SortMode.Multiple" 
                           Groupable="false"
                           QuickFilter="@_quickFilter"
                           Hover="true"
                           Striped="true"
                           Dense="true">
                    <Columns>
                        <PropertyColumn Property="x => x.Id" Title="ID" />
                        <TemplateColumn Title="Koda">
                            <CellTemplate Context="tool">
                                <MudChip T="string" Size="Size.Small" Color="Color.Secondary">@tool.Item.Code</MudChip>
                            </CellTemplate>
                        </TemplateColumn>
                        <PropertyColumn Property="x => x.Name" Title="Naziv" />
                        <PropertyColumn Property="x => x.Description" Title="Opis">
                            <CellTemplate Context="tool">
                                <MudText>@(tool.Item.Description ?? "-")</MudText>
                            </CellTemplate>
                        </PropertyColumn>
                        <PropertyColumn Property="x => x.Version" Title="Verzija">
                            <CellTemplate Context="tool">
                                <MudText>@(tool.Item.Version ?? "-")</MudText>
                            </CellTemplate>
                        </PropertyColumn>
                        <PropertyColumn Property="x => x.CreatedBy" Title="Ustvaril">
                            <CellTemplate Context="tool">
                                <MudText>@(tool.Item.CreatedBy ?? "-")</MudText>
                            </CellTemplate>
                        </PropertyColumn>
                        <PropertyColumn Property="x => x.CreatedAt" Title="Ustvarjeno" Format="dd.MM.yyyy HH:mm" />
                        <TemplateColumn Title="Akcije" Sortable="false" Filterable="false">
                            <CellTemplate Context="tool">
                                <MudStack Row="true" Spacing="1">
                                    <MudIconButton Icon="@Icons.Material.Filled.Visibility" 
                                                 Color="Color.Primary" 
                                                 Size="Size.Small"
                                                 Title="Poglej podrobnosti" />
                                    <MudIconButton Icon="@Icons.Material.Filled.Edit" 
                                                 Color="Color.Warning" 
                                                 Size="Size.Small"
                                                 Title="Uredi" />
                                    <MudIconButton Icon="@Icons.Material.Filled.SwapHoriz" 
                                                 Color="Color.Success" 
                                                 Size="Size.Small"
                                                 Title="Izposodi" />
                                </MudStack>
                            </CellTemplate>
                        </TemplateColumn>
                    </Columns>
                    <PagerContent>
                        <MudDataGridPager T="Tool" />
                    </PagerContent>
                </MudDataGrid>
            </MudPaper>
        }
    </MudStack>
</AuthorizeView>

@code {
    private List<Tool>? tools = null;
    private string searchString = "";

    private Func<Tool, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;

        if (x.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.Code.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (!string.IsNullOrEmpty(x.Description) && x.Description.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (!string.IsNullOrEmpty(x.Version) && x.Version.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    };

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("=== Tools OnInitializedAsync START ===");
        try
        {
            var result = await ToolService.GetAllToolsAsync();
            Console.WriteLine($"Tools loaded: {result?.Count ?? 0}");
            tools = result ?? new List<Tool>();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading tools: {ex.Message}");
            tools = new List<Tool>(); // Prevent infinite loading
        }
        Console.WriteLine("=== Tools OnInitializedAsync END ===");
    }
}