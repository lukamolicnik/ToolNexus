@page "/tools"
@rendermode InteractiveServer
@attribute [Authorize(Roles = "ADMIN,SUPERVISOR,WORKER")]
@inject IToolService ToolService
@inject ISnackbar Snackbar
@using Microsoft.AspNetCore.Authorization
@using System.Security.Claims
@using ToolNexus.WebUI.Server.Components.Dialogs
@using ToolNexus.WebUI.Server.Components.Shared
@using ToolNexus.Application.Tools.DTOs

<PageTitle>Orodja - ToolNexus</PageTitle>

<MudContainer MaxWidth="MaxWidth.False" Class="pa-4">
    <MudStack Spacing="4">
        <MudStack Row="true" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
            <MudText Typo="Typo.h4">Orodja</MudText>
            <MudStack Row="true" Spacing="2">
                <AuthorizeView Roles="ADMIN,SUPERVISOR">
                    <MudButton Variant="Variant.Filled" 
                              Color="Color.Primary" 
                              StartIcon="@Icons.Material.Filled.Add"
                              OnClick="CreateTool">
                        Dodaj orodje
                    </MudButton>
                </AuthorizeView>
                <MudButton Variant="Variant.Outlined" 
                          StartIcon="@Icons.Material.Filled.ArrowBack" 
                          Href="/">
                    Nazaj
                </MudButton>
            </MudStack>
        </MudStack>

        @if (filteredTools == null)
        {
            <MudPaper Elevation="2" Class="pa-8">
                <MudStack Spacing="4" AlignItems="AlignItems.Center">
                    <MudProgressCircular Color="Color.Primary" Size="Size.Large" Indeterminate="true" />
                    <MudText Typo="Typo.h6">Nalagam orodja...</MudText>
                </MudStack>
            </MudPaper>
        }
        else if (filteredTools.Count == 0)
        {
            <MudAlert Severity="Severity.Info" Variant="Variant.Filled">
                <MudStack Spacing="2" AlignItems="AlignItems.Center">
                    <MudIcon Icon="Icons.Material.Filled.Info" Size="Size.Large" />
                    <MudText Typo="Typo.h6">Ni orodij</MudText>
                    <MudText Typo="Typo.body1">V sistemu trenutno ni registriranih orodij.</MudText>
                </MudStack>
            </MudAlert>
        }
        else
        {
            <EntityDataGrid TItem="ToolDto"
                           Title="Seznam orodij"
                           Icon="@Icons.Material.Filled.Construction"
                           Items="filteredTools"
                           Loading="isLoading"
                           OnView="ViewTool"
                           OnEdit="EditTool"
                           OnDelete="DeleteTool"
                           CanEdit="@(tool => canEdit)"
                           CanDelete="@(tool => canDelete)"
                           SearchFunc="@((tool, search) => ToolSearchFunc(tool, search))">
                <ColumnsTemplate>
                    <PropertyColumn T="ToolDto" TProperty="int" Property="x => x.Id" Title="ID" Sortable="true" Filterable="false" />
                    <PropertyColumn T="ToolDto" TProperty="string" Property="x => x.Code" Title="Koda" Sortable="true" Filterable="true" />
                    <PropertyColumn T="ToolDto" TProperty="string" Property="x => x.Name" Title="Naziv" />
                    <TemplateColumn T="ToolDto" Title="Opis">
                        <CellTemplate Context="toolContext">
                            <MudText>@(toolContext.Item.Description ?? "-")</MudText>
                        </CellTemplate>
                    </TemplateColumn>
                    <TemplateColumn T="ToolDto" Title="Kategorija">
                        <CellTemplate Context="toolContext">
                            <MudText>@(toolContext.Item.ToolCategoryName ?? "-")</MudText>
                        </CellTemplate>
                    </TemplateColumn>
                    <TemplateColumn T="ToolDto" Title="Zaloga" Sortable="true" SortBy="x => x.CurrentStock">
                        <CellTemplate Context="toolContext">
                            <MudChip T="string" Size="Size.Small" 
                                     Color="@(toolContext.Item.IsCritical ? Color.Error : toolContext.Item.IsBelowMinimum ? Color.Warning : Color.Success)">
                                @toolContext.Item.CurrentStock
                            </MudChip>
                        </CellTemplate>
                    </TemplateColumn>
                    <TemplateColumn T="ToolDto" Title="Min/Krit">
                        <CellTemplate Context="toolContext">
                            <MudText>@toolContext.Item.MinimumStock / @toolContext.Item.CriticalStock</MudText>
                        </CellTemplate>
                    </TemplateColumn>
                    <TemplateColumn T="ToolDto" Title="Ustvaril">
                        <CellTemplate Context="toolContext">
                            <MudText>@(toolContext.Item.CreatedBy ?? "-")</MudText>
                        </CellTemplate>
                    </TemplateColumn>
                    <TemplateColumn T="ToolDto" Title="Ustvarjeno" Sortable="true" SortBy="x => x.CreatedAt" Filterable="true">
                        <CellTemplate Context="toolContext">
                            <MudText>@toolContext.Item.CreatedAt.ToString("dd.MM.yyyy HH:mm")</MudText>
                        </CellTemplate>
                        <FilterTemplate>
                            <MudDatePicker @bind-Date="dateFilter" @bind-Date:after="OnDateFilterChanged" Clearable="true" />
                        </FilterTemplate>
                    </TemplateColumn>
                </ColumnsTemplate>
                <ActionsTemplate Context="tool">
                    @if (canEdit)
                    {
                        <MudIconButton Icon="@Icons.Material.Filled.Add" 
                                     Color="Color.Success" 
                                     Size="Size.Small"
                                     Title="Povečaj zalogo"
                                     OnClick="@(() => AdjustStock(tool, true))" />
                    }
                    <MudIconButton Icon="@Icons.Material.Filled.Remove" 
                                 Color="Color.Warning" 
                                 Size="Size.Small"
                                 Title="Zmanjšaj zalogo"
                                 OnClick="@(() => AdjustStock(tool, false))" />
                </ActionsTemplate>
            </EntityDataGrid>
        }
    </MudStack>
</MudContainer>

<ToolFormDialog IsVisible="@showToolDialog"
                     Tool="@selectedTool"
                     IsEdit="@isEditMode"
                     IsViewOnly="@isViewOnly"
                     OnResult="HandleToolDialogResult" />

<StockAdjustmentDialog IsVisible="@showStockDialog"
                       Tool="@selectedTool"
                       IsIncreaseMode="@isIncreaseMode"
                       OnResult="HandleStockDialogResult" />

@if (showDeleteDialog)
{
    <div style="position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0,0,0,0.5); z-index: 9999; display: flex; justify-content: center; align-items: center;">
        <MudPaper Class="pa-6" Style="max-width: 400px; width: 90vw;">
            <MudStack Spacing="3">
                <MudText Typo="Typo.h6">Potrditev brisanja</MudText>
                <MudText Typo="Typo.body1">@deleteMessage</MudText>
                <MudText Typo="Typo.body2" Color="Color.Error">Ta operacija bo trajno izbrisala orodje iz sistema.</MudText>
                <MudStack Row="true" Justify="Justify.FlexEnd" Spacing="2">
                    <MudButton OnClick="() => showDeleteDialog = false">Prekliči</MudButton>
                    <MudButton Color="Color.Error" Variant="Variant.Filled" OnClick="ConfirmDelete">Izbriši</MudButton>
                </MudStack>
            </MudStack>
        </MudPaper>
    </div>
}

@code {
    private List<ToolDto>? tools;
    private List<ToolDto>? filteredTools;
    private ToolDto? selectedTool;
    private bool isLoading = false;
    private bool canEdit = false;
    private bool canDelete = false;
    private bool showToolDialog = false;
    private bool isEditMode = false;
    private bool isViewOnly = false;
    private bool showDeleteDialog = false;
    private string deleteMessage = string.Empty;
    private ToolDto? toolToDelete;
    private DateTime? dateFilter;
    private bool showStockDialog = false;

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var authState = await authenticationStateTask;
            
            if (authState.User.Identity.IsAuthenticated)
            {
                var userRoles = authState.User.Claims
                    .Where(c => c.Type == ClaimTypes.Role)
                    .Select(c => c.Value)
                    .ToList();


                canEdit = userRoles.Contains("ADMIN") || userRoles.Contains("SUPERVISOR");
                canDelete = userRoles.Contains("ADMIN") || userRoles.Contains("SUPERVISOR");
                
                await LoadTools();
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Napaka pri inicializaciji: {ex.Message}", Severity.Error);
        }
    }

    private async Task LoadTools()
    {
        try
        {
            isLoading = true;
            var result = await ToolService.GetAllToolsAsync();
            tools = result ?? new List<ToolDto>();
            ApplyDateFilter();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Napaka pri nalaganju orodij: {ex.Message}", Severity.Error);
            tools = new List<ToolDto>();
            filteredTools = new List<ToolDto>();
        }
        finally
        {
            isLoading = false;
        }
    }

    private bool ToolSearchFunc(ToolDto tool, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;

        return tool.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase) ||
               tool.Code.Contains(searchString, StringComparison.OrdinalIgnoreCase) ||
               (!string.IsNullOrEmpty(tool.Description) && tool.Description.Contains(searchString, StringComparison.OrdinalIgnoreCase)) ||
               (!string.IsNullOrEmpty(tool.ToolCategoryName) && tool.ToolCategoryName.Contains(searchString, StringComparison.OrdinalIgnoreCase));
    }

    private void ApplyDateFilter()
    {
        if (tools == null)
        {
            filteredTools = new List<ToolDto>();
            return;
        }

        if (dateFilter.HasValue)
        {
            filteredTools = tools.Where(t => t.CreatedAt.Date == dateFilter.Value.Date).ToList();
        }
        else
        {
            filteredTools = tools.ToList();
        }
    }

    private Task CreateTool()
    {
        selectedTool = null;
        isEditMode = false;
        isViewOnly = false;
        showToolDialog = true;
        StateHasChanged();
        return Task.CompletedTask;
    }

    private Task ViewTool(ToolDto tool)
    {
        selectedTool = tool;
        isEditMode = false;
        isViewOnly = true;
        showToolDialog = true;
        StateHasChanged();
        return Task.CompletedTask;
    }

    private Task EditTool(ToolDto tool)
    {
        selectedTool = tool;
        isEditMode = true;
        isViewOnly = false;
        showToolDialog = true;
        StateHasChanged();
        return Task.CompletedTask;
    }

    private Task DeleteTool(ToolDto tool)
    {
        toolToDelete = tool;
        deleteMessage = $"Ali ste prepričani, da želite izbrisati orodje {tool.Name}?";
        showDeleteDialog = true;
        StateHasChanged();
        return Task.CompletedTask;
    }

    private async Task HandleToolDialogResult(bool success)
    {
        showToolDialog = false;
        if (success)
        {
            await LoadTools();
        }
    }

    private async Task ConfirmDelete()
    {
        showDeleteDialog = false;
        if (toolToDelete != null)
        {
            try
            {
                await ToolService.DeleteToolAsync(toolToDelete.Id);
                Snackbar.Add($"Orodje {toolToDelete.Name} je bilo uspešno izbrisano.", Severity.Success);
                await LoadTools();
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Napaka pri brisanju orodja: {ex.Message}", Severity.Error);
            }
        }
        toolToDelete = null;
    }

    private bool isIncreaseMode = true;
    
    private Task AdjustStock(ToolDto tool, bool isIncrease)
    {
        selectedTool = tool;
        isIncreaseMode = isIncrease;
        showStockDialog = true;
        StateHasChanged();
        return Task.CompletedTask;
    }

    private async Task HandleStockDialogResult(bool success)
    {
        showStockDialog = false;
        if (success)
        {
            await LoadTools();
        }
    }

    private void OnDateFilterChanged()
    {
        ApplyDateFilter();
        StateHasChanged();
    }
}