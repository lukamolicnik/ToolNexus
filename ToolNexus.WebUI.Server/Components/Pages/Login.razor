@page "/login"
@layout ToolNexus.WebUI.Server.Components.Layout.EmptyLayout
@inject IUserService UserService
@inject NavigationManager NavigationManager
@using Microsoft.AspNetCore.Authentication.Cookies
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Components.Forms
@using System.Security.Claims

<PageTitle>Prijava - ToolNexus</PageTitle>

<div class="login-container">
    <div class="login-card">
        <div class="login-header">
            <h1 class="login-title">Prijava</h1>
            <p class="login-subtitle">Vnesite svoje podatke za dostop</p>
        </div>

        <EditForm Model="@LoginDto" OnValidSubmit="HandleLoginAsync" FormName="LoginForm">
            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="error-message">
                    @errorMessage
                </div>
            }
            
            <div class="form-group">
                <label class="form-label" for="username">Uporabniško ime</label>
                <InputText @bind-Value="LoginDto.Username" class="form-input" id="username" placeholder="Vnesite uporabniško ime" />
            </div>

            <div class="form-group">
                <label class="form-label" for="password">Geslo</label>
                <InputText @bind-Value="LoginDto.Password" type="password" class="form-input" id="password" placeholder="Vnesite geslo" />
            </div>

            <button type="submit" class="login-button">
                Prijavi se
            </button>
        </EditForm>
    </div>
</div>

@code {
    [CascadingParameter]
    public HttpContext? HttpContext { get; set; }

    [SupplyParameterFromForm]
    public LoginDto LoginDto { get; set; } = new();

    private string errorMessage = string.Empty;

    private async Task HandleLoginAsync()
    {
        errorMessage = string.Empty; // Clear previous error message
        Console.WriteLine($"Login attempt - Username: '{LoginDto.Username}', Password length: {LoginDto.Password?.Length ?? 0}");
        try
        {
            var result = await UserService.AuthenticateAsync(LoginDto);

            if (result?.Success == true && result.User != null)
            {
                var claims = new List<Claim>
                {
                    new Claim("UserId", result.User.Id.ToString()),
                    new Claim(ClaimTypes.Name, result.User.Username),
                    new Claim(ClaimTypes.Role, result.User.UserRole.Code)
                };

                var identity = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);
                var principal = new ClaimsPrincipal(identity);
                
                if (HttpContext != null)
                {
                    await HttpContext.SignInAsync(principal);
                    
                    // Redirect using server-side redirect to avoid SignalR circuit issues
                    HttpContext.Response.Redirect("/");
                }
            }
            else
            {
                errorMessage = "Napačno uporabniško ime ali geslo.";
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Login error: {ex.Message}");
            errorMessage = "Napaka pri prijavi. Prosimo, poskusite ponovno.";
        }
    }
}