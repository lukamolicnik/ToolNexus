@using MudBlazor
@inject IUserService UserService
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager

<MudDialog>
    <DialogContent>
        <EditForm Model="createUserDto" OnValidSubmit="HandleSubmit">
            <DataAnnotationsValidator />
            <MudStack Spacing="3">
                <MudTextField @bind-Value="createUserDto.Username"
                For="@(() => createUserDto.Username)"
                Label="Uporabniško ime"
                Variant="Variant.Outlined"
                Required="true"
                Adornment="Adornment.Start"
                AdornmentIcon="Icons.Material.Filled.Person" />

                <MudStack Row="true" Spacing="2">
                    <MudTextField @bind-Value="createUserDto.FirstName"
                    For="@(() => createUserDto.FirstName)"
                    Label="Ime"
                    Variant="Variant.Outlined"
                    Required="true" />

                    <MudTextField @bind-Value="createUserDto.LastName"
                    For="@(() => createUserDto.LastName)"
                    Label="Priimek"
                    Variant="Variant.Outlined"
                    Required="true" />
                </MudStack>

                <MudTextField @bind-Value="createUserDto.Email"
                For="@(() => createUserDto.Email)"
                Label="Email"
                Variant="Variant.Outlined"
                InputType="InputType.Email"
                Required="true"
                Adornment="Adornment.Start"
                AdornmentIcon="Icons.Material.Filled.Email" />

                <MudSelect @bind-Value="createUserDto.UserRoleId"
                For="@(() => createUserDto.UserRoleId)"
                Label="Vloga"
                Variant="Variant.Outlined"
                Required="true"
                AnchorOrigin="Origin.BottomCenter">
                    @if (userRoles != null)
                    {
                        @foreach (var role in userRoles)
                        {
                            <MudSelectItem Value="@role.Id">
                                <div style="display: flex; align-items: center">
                                    <MudIcon Icon="@GetRoleIcon(role.Code)" Style="margin-right: 10px" />
                                    @role.Name
                                </div>
                            </MudSelectItem>
                        }
                    }
                </MudSelect>

                <MudTextField @bind-Value="createUserDto.Password"
                              For="@(() => createUserDto.Password)"
                              Label="Geslo"
                              Variant="Variant.Outlined"
                              InputType="InputType.Password"
                              Required="true"
                              Adornment="Adornment.Start"
                              AdornmentIcon="Icons.Material.Filled.Lock" />

                <MudCheckBox @bind-Value="createUserDto.IsActive"
                             For="@(() => createUserDto.IsActive)"
                             Label="Aktiven uporabnik"
                             Color="Color.Primary" />
            </MudStack>
        </EditForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Prekliči</MudButton>
        <MudButton Color="Color.Primary"
                   Variant="Variant.Filled"
                   OnClick="HandleSubmit"
                   Disabled="isSubmitting">
            @if (isSubmitting)
            {
                <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                <MudText Class="ms-2">Ustvarjam...</MudText>
            }
            else
            {
                <MudText>Ustvari</MudText>
            }
        </MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    private UserDto user;

    [Parameter] public Func<Task>? OnUserCreated { get; set; }

    private CreateUserDto createUserDto = new();
    private bool isSubmitting = false;
    private List<UserRoleDto>? userRoles;

    protected override async Task OnInitializedAsync()
    {
        var authState = await authenticationStateTask;

        // Če uporabnik ni prijavljen, ga preusmeri na prijavno stran
        if (!authState.User.Identity.IsAuthenticated)
        {
            await Task.Delay(1);
            NavigationManager.NavigateTo("/login", replace: true);
        }
        else
        {
            var userId = Int32.Parse(authState.User.Identities
                .Select(i => i.Claims.FirstOrDefault(c => c.Type == "UserId")?.Value)
                .FirstOrDefault());

            user = await UserService.GetUserByIdAsync(userId);
            await LoadUserRoles();
            StateHasChanged(); // Sprožimo re-render
        }
    }

    private async Task LoadUserRoles()
    {
        try
        {
            userRoles = await UserService.GetAllUserRolesAsync();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Napaka pri nalaganju vlog: {ex.Message}", Severity.Error);
            userRoles = new List<UserRoleDto>();
        }
    }

    private string GetRoleIcon(string roleCode)
    {
        return roleCode switch
        {
            "ADMIN" => Icons.Material.Filled.AdminPanelSettings,
            "SUPERVISOR" => Icons.Material.Filled.ManageAccounts,
            "WORKER" => Icons.Material.Filled.Person,
            _ => Icons.Material.Filled.Person
        };
    }

    private async Task HandleSubmit()
    {
        isSubmitting = true;
        try
        {
            if (user == null)
            {
                Snackbar.Add("Napaka: uporabnik ni naložen", Severity.Error);
                return;
            }
            await UserService.CreateUserAsync(createUserDto, user.Username);
            Snackbar.Add($"Uporabnik {createUserDto.FirstName} {createUserDto.LastName} uspešno ustvarjen.", Severity.Success);

            if (OnUserCreated != null)
                await OnUserCreated();

            // Zapri dialog preko event callback-a
            await InvokeAsync(StateHasChanged);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Napaka: {ex.Message}", Severity.Error);
        }
        finally
        {
            isSubmitting = false;
        }
    }

    private void Cancel()
    {
        // Zapri dialog preko event callback-a
        InvokeAsync(StateHasChanged);
    }
}
