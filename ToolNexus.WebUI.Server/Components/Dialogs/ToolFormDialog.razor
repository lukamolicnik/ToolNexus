@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.Forms
@using ToolNexus.Application.ToolCategories
@using ToolNexus.Application.ToolCategories.DTOs
@using ToolNexus.Application.Tools
@using ToolNexus.Application.Tools.DTOs
@using ToolNexus.WebUI.Server.Services
@using ToolNexus.WebUI.Server.Components.Shared
@inject ISnackbar Snackbar
@inject IToolService ToolService
@inject IToolCategoryService CategoryService
@inject IQRCodeService QRCodeService
@inject IJSRuntime JS

@if (IsVisible)
{
    <div style="position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0,0,0,0.5); z-index: 9999; overflow-y: auto; padding: 20px 10px;">
        <MudPaper Class="pa-6" Style="@GetDialogStyle()" Elevation="8">
            <MudStack Spacing="3">
                <MudStack Row="true" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
                    <MudText Typo="Typo.h5">@GetDialogTitle()</MudText>
                    <MudIconButton Icon="Icons.Material.Filled.Close" OnClick="HandleCancel" />
                </MudStack>

                @if (IsViewOnly)
                {
                    <MudStack Spacing="3">
                        <MudGrid>
                            <MudItem xs="12" sm="8">
                                <MudStack Spacing="3">
                                    <MudTextField Value="@(Tool?.Code)" Label="Koda" Variant="Variant.Outlined" ReadOnly="true" />
                                    <MudTextField Value="@(Tool?.Name)" Label="Naziv" Variant="Variant.Outlined" ReadOnly="true" />
                                    <MudTextField Value="@(Tool?.Description)" Label="Opis" Variant="Variant.Outlined" Lines="3" ReadOnly="true" />
                                    @if (!string.IsNullOrEmpty(Tool?.ToolCategoryName))
                                    {
                                        <MudTextField Value="@(Tool?.ToolCategoryName)" Label="Kategorija" Variant="Variant.Outlined" ReadOnly="true" />
                                    }
                                    <MudTextField Value="@(Tool?.CurrentStock)" Label="Trenutna zaloga" Variant="Variant.Outlined" ReadOnly="true" />
                                    <MudTextField Value="@($"{Tool?.MinimumStock} / {Tool?.CriticalStock}")" Label="Min/Krit zaloga" Variant="Variant.Outlined" ReadOnly="true" />
                                    <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="2">
                                        <MudChip T="string" Color="@(Tool?.IsActive == true ? Color.Success : Color.Error)" Size="Size.Small">
                                            @(Tool?.IsActive == true ? "Aktivno" : "Neaktivno")
                                        </MudChip>
                                    </MudStack>
                                    <MudGrid>
                                        <MudItem xs="12" sm="6">
                                            <MudTextField Value="@(Tool?.CreatedByName ?? $"ID: {Tool?.CreatedBy}")" Label="Ustvaril" Variant="Variant.Outlined" ReadOnly="true" />
                                        </MudItem>
                                        <MudItem xs="12" sm="6">
                                            <MudTextField Value="@(Tool?.CreatedAt.ToString("dd.MM.yyyy HH:mm"))" Label="Ustvarjeno" Variant="Variant.Outlined" ReadOnly="true" />
                                        </MudItem>
                                        @if (!string.IsNullOrEmpty(Tool?.UpdatedBy))
                                        {
                                            <MudItem xs="12" sm="6">
                                                <MudTextField Value="@(Tool?.UpdatedByName ?? $"ID: {Tool?.UpdatedBy}")" Label="Posodobil" Variant="Variant.Outlined" ReadOnly="true" />
                                            </MudItem>
                                            <MudItem xs="12" sm="6">
                                                <MudTextField Value="@(Tool?.UpdatedAt?.ToString("dd.MM.yyyy HH:mm"))" Label="Posodobljeno" Variant="Variant.Outlined" ReadOnly="true" />
                                            </MudItem>
                                        }
                                    </MudGrid>
                                </MudStack>
                            </MudItem>
                            <MudItem xs="12" sm="4">
                                <MudStack Spacing="2" AlignItems="AlignItems.Center">
                                    <MudText Typo="Typo.h6">QR Koda</MudText>
                                    @if (!string.IsNullOrEmpty(qrCodeImage))
                                    {
                                        <MudImage Src="@qrCodeImage" Alt="QR Code" Width="200" Height="200" Style="border: 1px solid #ddd; padding: 10px;" />
                                        <MudButton Variant="Variant.Filled" 
                                                  Color="Color.Primary" 
                                                  StartIcon="@Icons.Material.Filled.Print"
                                                  OnClick="PrintQRCode"
                                                  Size="Size.Small">
                                            Natisni QR kodo
                                        </MudButton>
                                    }
                                    else
                                    {
                                        <MudProgressCircular Color="Color.Primary" Size="Size.Small" Indeterminate="true" />
                                    }
                                </MudStack>
                            </MudItem>
                        </MudGrid>
                        
                        <MudStack Row="true" Justify="Justify.FlexEnd">
                            <MudButton OnClick="HandleCancel">Zapri</MudButton>
                        </MudStack>
                    </MudStack>
                }
                else if (isSubmitting)
                {
                    <MudStack Spacing="4" AlignItems="AlignItems.Center" Class="pa-4">
                        <MudProgressCircular Color="Color.Primary" Size="Size.Large" Indeterminate="true" />
                        <MudText Typo="Typo.body1">@(IsEdit ? "Posodabljam orodje..." : "Ustvarjam orodje...")</MudText>
                    </MudStack>
                }
                else
                {
                    <EditForm EditContext="editContext" OnValidSubmit="HandleValidSubmit">
                        <DataAnnotationsValidator />
                        <MudStack Spacing="3">
                            
                            @if (!IsEdit)
                            {
                                <MudExpansionPanels Elevation="1" Class="mb-3">
                                    <MudExpansionPanel Text="Skeniranje QR kode" Icon="@Icons.Material.Filled.QrCodeScanner">
                                        <QRCodeScanner OnCodeScanned="HandleQrCodeScanned" />
                                        @if (!string.IsNullOrEmpty(scannedCode))
                                        {
                                            <MudAlert Severity="Severity.Info" Class="mt-2">
                                                Skenirana koda: @scannedCode
                                            </MudAlert>
                                        }
                                    </MudExpansionPanel>
                                </MudExpansionPanels>
                                
                                <MudTextField @bind-Value="toolModel.Code"
                                              For="@(() => toolModel.Code)"
                                              Label="Koda"
                                              Variant="Variant.Outlined"
                                              Required="true" />

                                <MudTextField @bind-Value="toolModel.Name"
                                              For="@(() => toolModel.Name)"
                                              Label="Naziv"
                                              Variant="Variant.Outlined"
                                              Required="true" />

                                <MudTextField @bind-Value="toolModel.Description"
                                              For="@(() => toolModel.Description)"
                                              Label="Opis"
                                              Variant="Variant.Outlined"
                                              Lines="3" />

                                <MudNumericField @bind-Value="toolModel.MinimumStock"
                                                 For="@(() => toolModel.MinimumStock)"
                                                 Label="Minimalna zaloga"
                                                 Variant="Variant.Outlined"
                                                 Min="0" />

                                <MudNumericField @bind-Value="toolModel.CriticalStock"
                                                 For="@(() => toolModel.CriticalStock)"
                                                 Label="Kritična zaloga"
                                                 Variant="Variant.Outlined"
                                                 Min="0" />

                                <MudSelect @bind-Value="toolModel.ToolCategoryId"
                                           Label="Kategorija"
                                           Variant="Variant.Outlined"
                                           Placeholder="Izberite kategorijo..."
                                           AnchorOrigin="Origin.BottomCenter">
                                    <MudSelectItem Value="@((int?)null)">Brez kategorije</MudSelectItem>
                                    @if (categories != null)
                                    {
                                        @foreach (var category in categories)
                                        {
                                            <MudSelectItem Value="@((int?)category.Id)">@category.Name</MudSelectItem>
                                        }
                                    }
                                </MudSelect>

                                <MudSwitch @bind-Value="isActiveForNew" Color="Color.Primary" Label="Aktivno" />
                            }
                            else
                            {
                                <MudTextField Value="@Tool?.Code"
                                              Label="Koda"
                                              Variant="Variant.Outlined"
                                              ReadOnly="true" />

                                <MudTextField @bind-Value="updateModel.Name"
                                              For="@(() => updateModel.Name)"
                                              Label="Naziv"
                                              Variant="Variant.Outlined"
                                              Required="true" />

                                <MudTextField @bind-Value="updateModel.Description"
                                              For="@(() => updateModel.Description)"
                                              Label="Opis"
                                              Variant="Variant.Outlined"
                                              Lines="3" />

                                <MudNumericField @bind-Value="updateModel.MinimumStock"
                                                 For="@(() => updateModel.MinimumStock)"
                                                 Label="Minimalna zaloga"
                                                 Variant="Variant.Outlined"
                                                 Min="0" />

                                <MudNumericField @bind-Value="updateModel.CriticalStock"
                                                 For="@(() => updateModel.CriticalStock)"
                                                 Label="Kritična zaloga"
                                                 Variant="Variant.Outlined"
                                                 Min="0" />

                                <MudSelect @bind-Value="updateModel.ToolCategoryId"
                                           Label="Kategorija"
                                           Variant="Variant.Outlined"
                                           Placeholder="Izberite kategorijo..."
                                           AnchorOrigin="Origin.BottomCenter">
                                    <MudSelectItem Value="@((int?)null)">Brez kategorije</MudSelectItem>
                                    @if (categories != null)
                                    {
                                        @foreach (var category in categories)
                                        {
                                            <MudSelectItem Value="@((int?)category.Id)">@category.Name</MudSelectItem>
                                        }
                                    }
                                </MudSelect>

                                <MudSwitch @bind-Value="updateModel.IsActive" Color="Color.Primary" Label="Aktivno" />
                            }


                            <ValidationSummary />

                            <MudStack Row="true" Justify="Justify.FlexEnd" Spacing="2">
                                <MudButton OnClick="HandleCancel">Prekliči</MudButton>
                                <MudButton ButtonType="ButtonType.Submit" 
                                          Color="Color.Primary" 
                                          Variant="Variant.Filled"
                                          Disabled="isSubmitting">
                                    @(IsEdit ? "Posodobi" : "Ustvari")
                                </MudButton>
                            </MudStack>
                        </MudStack>
                    </EditForm>
                }
            </MudStack>
        </MudPaper>
    </div>
}


@code {
    [Parameter] public bool IsVisible { get; set; }
    [Parameter] public ToolDto? Tool { get; set; }
    [Parameter] public bool IsEdit { get; set; }
    [Parameter] public bool IsViewOnly { get; set; }
    [Parameter] public EventCallback<bool> OnResult { get; set; }
    
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; } = default!;
    
    private CreateToolDto toolModel = new();
    private UpdateToolDto updateModel = new();
    private EditContext editContext = default!;
    private bool isSubmitting = false;
    private List<ToolCategoryDto>? categories;
    private string? qrCodeImage;
    private bool isActiveForNew = true;
    private string? scannedCode;
    
    protected override async Task OnParametersSetAsync()
    {
        if (IsVisible)
        {
            if (IsViewOnly && Tool != null)
            {
                // Generate QR code for viewing
                await GenerateQRCode();
            }
            else if (!IsViewOnly)
            {
                if (IsEdit && Tool != null)
                {
                    updateModel = new UpdateToolDto
                    {
                        Name = Tool.Name,
                        Description = Tool.Description,
                        MinimumStock = Tool.MinimumStock,
                        CriticalStock = Tool.CriticalStock,
                        ToolCategoryId = Tool.ToolCategoryId,
                        IsActive = Tool.IsActive
                    };
                    editContext = new EditContext(updateModel);
                    
                    // Load categories for editing
                    await LoadCategories();
                }
                else
                {
                    toolModel = new CreateToolDto();
                    editContext = new EditContext(toolModel);
                    isActiveForNew = true; // Reset to default
                    scannedCode = null; // Reset scanned code
                    
                    // Load categories only when creating new tool
                    await LoadCategories();
                }
            }
        }
    }
    
    private async Task LoadCategories()
    {
        try
        {
            var result = await CategoryService.GetActiveAsync();
            categories = result ?? new List<ToolCategoryDto>();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Napaka pri nalaganju kategorij: {ex.Message}", Severity.Error);
            categories = new List<ToolCategoryDto>();
        }
    }
    
    private string GetDialogTitle()
    {
        if (IsViewOnly) return "Podrobnosti orodja";
        return IsEdit ? "Uredi orodje" : "Dodaj orodje";
    }
    
    private string GetDialogStyle()
    {
        var maxWidth = IsViewOnly ? "800px" : "500px";
        return $"max-width: {maxWidth}; width: 90vw; margin: 0 auto;";
    }
    
    private async Task HandleValidSubmit()
    {
        try
        {
            isSubmitting = true;
            StateHasChanged();
            
            var authState = await authenticationStateTask;
            var userId = authState.User.Identity?.Name ?? "system";
            
            if (IsEdit && Tool != null)
            {
                await ToolService.UpdateToolAsync(Tool.Id, updateModel, userId);
                Snackbar.Add("Orodje je bilo uspešno posodobljeno.", Severity.Success);
            }
            else
            {
                // Set IsActive from the switch value before creating
                toolModel.IsActive = isActiveForNew;
                await ToolService.CreateToolAsync(toolModel, userId);
                Snackbar.Add("Orodje je bilo uspešno ustvarjeno.", Severity.Success);
            }
            
            await OnResult.InvokeAsync(true);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Napaka: {ex.Message}", Severity.Error);
        }
        finally
        {
            isSubmitting = false;
        }
    }
    
    private async Task HandleCancel()
    {
        await OnResult.InvokeAsync(false);
    }

    private async Task GenerateQRCode()
    {
        if (Tool != null && !string.IsNullOrEmpty(Tool.Code))
        {
            try
            {
                qrCodeImage = QRCodeService.GenerateQRCodeBase64(Tool.Code);
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Napaka pri generiranju QR kode: {ex.Message}", Severity.Error);
            }
        }
    }

    private async Task PrintQRCode()
    {
        if (Tool != null && !string.IsNullOrEmpty(qrCodeImage))
        {
            var printContent = $@"
                <div style='text-align: center; padding: 20px; font-family: Arial, sans-serif;'>
                    <div style='margin: 20px 0;'>
                        <img src='{qrCodeImage}' alt='QR Code' style='border: 1px solid #ddd; padding: 10px;' />
                    </div>
                    <p>{Tool.Code}</p>
                </div>
            ";

            await JS.InvokeVoidAsync("printContent", printContent);
        }
    }
    
    private void HandleQrCodeScanned(string code)
    {
        if (!string.IsNullOrEmpty(code))
        {
            toolModel.Code = code;
            scannedCode = code;
            StateHasChanged();
        }
    }
}