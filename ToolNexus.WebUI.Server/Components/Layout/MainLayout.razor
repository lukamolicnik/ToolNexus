@using Microsoft.AspNetCore.Authentication
@using System.Security.Claims
@using MudBlazor
@using ToolNexus.WebUI.Server.Components.Dialogs
@inherits LayoutComponentBase
@inject NavigationManager NavigationManager
@inject IUserService UserService
@inject ISnackbar Snackbar

<MudThemeProvider Theme="@customTheme" />

<AuthorizeView>
    <Authorized>
        <MudPopoverProvider />
        <MudDialogProvider />
        <MudSnackbarProvider />
        <MudLayout>
            <MudAppBar Elevation="1">
                <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
                
                <MudHidden Breakpoint="Breakpoint.Sm">
                    <MudSpacer />
                    <img src="eltras_logo.svg" alt="ELTRAS" style="height: 40px;" />
                    <MudSpacer />
                </MudHidden>
                
                <MudHidden Breakpoint="Breakpoint.Sm" Invert="true">
                    <MudSpacer />
                </MudHidden>

                @* Uporabniške informacije in odjava *@
                <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="1" Class="mr-2">
                    @if (user != null)
                    {
                        <MudTooltip Text="Uredi profil">
                            <MudButton OnClick="OpenProfileDialog" 
                                       Color="Color.Inherit" 
                                       Variant="Variant.Text"
                                       Class="pa-1 text-none"
                                       Style="min-width: auto;">
                                <MudHidden Breakpoint="Breakpoint.Xs">
                                    <MudText Typo="Typo.body2">@user.FullName</MudText>
                                </MudHidden>
                                <MudHidden Breakpoint="Breakpoint.Xs" Invert="true">
                                    <MudText Typo="Typo.body2">@GetShortName()</MudText>
                                </MudHidden>
                            </MudButton>
                        </MudTooltip>
                        
                        <MudChip Size="Size.Small"
                                 Color="@GetRoleColor()"
                                 T="string"
                                 Class="pa-1">
                            <MudHidden Breakpoint="Breakpoint.Xs">
                                @user.UserRole?.Name
                            </MudHidden>
                            <MudHidden Breakpoint="Breakpoint.Xs" Invert="true">
                                @GetRoleAbbreviation()
                            </MudHidden>
                        </MudChip>
                        
                        <MudTooltip Text="Odjavi se">
                            <a href="/logout" style="color: inherit; text-decoration: none;">
                                <MudIconButton Icon="@Icons.Material.Filled.Logout" Color="Color.Inherit" Size="Size.Small" />
                            </a>
                        </MudTooltip>
                    }
                    else
                    {
                        <MudProgressCircular Size="Size.Small" Indeterminate="true" />
                        <MudHidden Breakpoint="Breakpoint.Xs" Invert="true">
                            <MudText Typo="Typo.body2">Nalagam...</MudText>
                        </MudHidden>
                    }
                </MudStack>
            </MudAppBar>

            <MudDrawer @bind-Open="drawerOpen" 
                       Elevation="1" 
                       ClipMode="DrawerClipMode.Always"
                       Variant="DrawerVariant.Responsive"
                       Breakpoint="Breakpoint.Md">
                <NavMenu />
            </MudDrawer>

            <MudMainContent>
                <MudContainer MaxWidth="MaxWidth.False" Class="pa-2 pa-sm-3 pa-md-4">
                    @Body
                </MudContainer>
            </MudMainContent>
        </MudLayout>
    </Authorized>
    <NotAuthorized>
        <MudMainContent>
            @Body
        </MudMainContent>
    </NotAuthorized>
</AuthorizeView>

<UserFormDialog IsVisible="@showProfileDialog"
                User="@user"
                IsEdit="true"
                IsProfileMode="true"
                OnResult="HandleProfileDialogResult" />

@code {
    [CascadingParameter]
    public HttpContext HttpContext { get; set; }
    
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    private UserDto user;
    private bool drawerOpen = true;
    private bool showProfileDialog = false;

    private MudTheme customTheme = new MudTheme()
    {
        PaletteLight = new PaletteLight()
        {
            Primary = "#424242",
            PrimaryDarken = "#212121",
            PrimaryLighten = "#616161",
            Secondary = "#757575",
            Tertiary = "#9e9e9e",
            Info = "#424242",
            Success = "#4caf50",
            Warning = "#ff9800",
            Error = "#f44336",
            Dark = "#212121",
            AppbarBackground = "#424242",
            AppbarText = Colors.Shades.White,
            DrawerBackground = "#f5f5f5",
            DrawerText = "rgba(0,0,0, 0.87)",
            DrawerIcon = "rgba(0,0,0, 0.54)",
            Background = "#ffffff",
            Surface = "#ffffff",
            TextPrimary = "rgba(0,0,0, 0.87)",
            TextSecondary = "rgba(0,0,0, 0.54)"
        }
    };

    protected override async Task OnInitializedAsync()
    {
        await LoadUserData();
        StateHasChanged();
    }


    void DrawerToggle()
    {
        drawerOpen = !drawerOpen;
    }

    private string GetShortName()
    {
        if (string.IsNullOrEmpty(user?.FullName))
            return "";
        
        var parts = user.FullName.Split(' ', StringSplitOptions.RemoveEmptyEntries);
        if (parts.Length == 0)
            return "";
        if (parts.Length == 1)
            return parts[0];
        
        // Return first name and first letter of last name
        return $"{parts[0]} {parts[^1][0]}.";
    }

    private string GetRoleAbbreviation() => user?.UserRole?.Code switch
    {
        "ADMIN" => "ADM",
        "SUPERVISOR" => "NAD",
        "WORKER" => "DEL",
        _ => "?"
    };

    private Color GetRoleColor() => user?.UserRole?.Code switch
    {
        "ADMIN" => Color.Error,
        "SUPERVISOR" => Color.Warning,
        "WORKER" => Color.Info,
        _ => Color.Default
    };
    
    private void OpenProfileDialog()
    {
        showProfileDialog = true;
    }
    
    private async Task HandleProfileDialogResult(bool success)
    {
        showProfileDialog = false;
        
        if (success)
        {
            // Ponovno naloži uporabnikove podatke
            await LoadUserData();
            Snackbar.Add("Profil je bil uspešno posodobljen.", Severity.Success);
            StateHasChanged();
        }
    }
    
    private async Task LoadUserData()
    {
        try
        {
            int userId = 0;
            
            // Najprej pokušamo z HttpContext (SSR)
            if (HttpContext?.User?.Identity?.IsAuthenticated == true)
            {
                userId = Int32.Parse(HttpContext.User.Identities
                    .Select(i => i.Claims.FirstOrDefault(c => c.Type == "UserId")?.Value)
                    .FirstOrDefault() ?? "0");
            }
            // Če HttpContext ni dostopen, uporabimo AuthenticationStateProvider (InteractiveServer)
            else if (authenticationStateTask != null)
            {
                var authState = await authenticationStateTask;
                
                if (authState.User.Identity?.IsAuthenticated == true)
                {
                    userId = Int32.Parse(authState.User.Identities
                        .Select(i => i.Claims.FirstOrDefault(c => c.Type == "UserId")?.Value)
                        .FirstOrDefault() ?? "0");
                }
            }
            
            if (userId > 0)
            {
                user = await UserService.GetUserByIdAsync(userId);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading user data: {ex.Message}");
        }
    }
}
